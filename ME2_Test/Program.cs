using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ME2_Test
{
    class Program
    {
        static void Main(string[] args)
        {
            List<RealAxis> R = new List<RealAxis>();
            List<DiscreteAxis> D = new List<DiscreteAxis>();
            List<BinaryAxis> B = new List<BinaryAxis>();
            for(int i = 0; i < 3; i++)
            {
                R.Add(new RealAxis(-32.768, 32.768));
            }
            Space S = new Space(R, D, B);

            Map<Space, Individual, double> M = new Map<Space, Individual, double>(S, false, 0.5, ME2Functions.RandomIndividual,
                MapFunctions.MapNeighbors, ME2Functions.Ackley, ME2Functions.ApplyFitness, ME2Functions.RouletteSelection);

            Individual Best = M.MappedSpace.ElementAt(0);
            foreach(Individual potentialBest in M.MappedSpace)
            {
                if (potentialBest.Fitness > Best.Fitness)
                    Best = potentialBest;
            }
            Console.WriteLine(Best);

            Explore<Space, Individual, double> E1 = new Explore<Space, Individual, double>(S, false, M.MappedSpace, ExploitFunctions.ExploitNeighbors,
                    ME2Functions.NormalMutate, ME2Functions.Ackley, ME2Functions.ApplyFitness, ExploreFunctions.ApplyExplorePOM, ExploreFunctions.ExploreTP,
                    ME2Functions.TotalFitness, 100);

            Best = E1.Optimized.ElementAt(0);
            foreach (Individual potentialBest in E1.Optimized)
            {
                if (potentialBest.Fitness > Best.Fitness)
                    Best = potentialBest;
            }
            Console.WriteLine(Best);

            Exploit<Space, Individual, double> E2 = new Exploit<Space, Individual, double>(S, false, E1.Optimized, ExploitFunctions.ExploitNeighbors,
                    ME2Functions.NormalMutate, ME2Functions.Ackley, ME2Functions.ApplyFitness, ExploitFunctions.ApplyExploitPOM, ExploitFunctions.ExploitTP, 
                    ME2Functions.TotalFitness, 100);

            Best = E2.Optimized.First();
            foreach (Individual potentialBest in E2.Optimized)
            {
                if (potentialBest.Fitness > Best.Fitness)
                    Best = potentialBest;
            }
            Console.WriteLine(Best);


        }
    }
}
