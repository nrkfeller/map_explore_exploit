using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ME2_Test
{
    class Space
    {
        //private List<RealAxis> _realAxes = new List<RealAxis>();
        //private List<DiscreteAxis> _discreteAxes = new List<DiscreteAxis>();
        //private List<BinaryAxis> _binaryAxes = new List<BinaryAxis>();
        private List<object> _axes = new List<object>();
        public int RealAxes { get; private set; }
        public int DiscreteAxes { get; private set; }
        public int BinaryAxes { get; private set; }

        public Space(List<RealAxis> RealAxes, List<DiscreteAxis> DiscreteAxes, List<BinaryAxis> BinaryAxes)
        {
            if(RealAxes == null && DiscreteAxes == null && BinaryAxes == null)
            {
                throw new ArgumentException("Space: At least one parameter is required");
            }
            if(RealAxes.Count() == 0 && DiscreteAxes.Count == 0 && BinaryAxes.Count == 0)
            {
                throw new ArgumentException("Space: At least one parameter is required");
            }
            for(int i = 0; i < RealAxes.Count; i++)
            {
                this._axes.Add(RealAxes[i]);
                ((RealAxis)this._axes[i]).Order = i;
            }
            for(int j = 0; j < DiscreteAxes.Count; j++)
            {
                this._axes.Add(DiscreteAxes[j]);
                ((DiscreteAxis)this._axes[j]).Order = RealAxes.Count + j;
            }
            for(int k = 0; k < BinaryAxes.Count; k++)
            {
                this._axes.Add(BinaryAxes[k]);
                ((BinaryAxis)this._axes[k]).Order = RealAxes.Count + DiscreteAxes.Count + k;
            }
            this.RealAxes = RealAxes.Count;
            this.BinaryAxes = BinaryAxes.Count;
            this.DiscreteAxes = DiscreteAxes.Count;
        }

        public object this[int Index]
        {
            get
            {
                if (Index < 0 || Index > this._axes.Count - 1)
                {
                    throw new IndexOutOfRangeException("Space.this[]: Index must be between zero and " + (this._axes.Count() - 1).ToString());
                }
                return this._axes[Index];
            }
        }

        public int Size
        {
            get
            {
                return this._axes.Count;
            }
        }
    }
}
